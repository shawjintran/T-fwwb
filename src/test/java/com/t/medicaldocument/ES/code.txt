
     // 这是之前写的按照pdfid分类,分类成对应文献
    //获取数据
//
//    //实现搜索功能
//    public List<SearchShow> searchPage(String keyword, int pageNo, int pageSize) throws IOException {
//        //如果分页太小也从第一个开始分页
//        if(pageNo<=0){
//            pageNo=0;
//        }
//
//        log.info(keyword+":"+pageNo+":"+pageSize);
//
//
//        //条件搜索
//        SearchRequest searchRequest = new SearchRequest("pdf");
//        //构造器
//        SearchSourceBuilder sourceBuilder = new SearchSourceBuilder();
//
//
//        //分页
//        sourceBuilder.from(pageNo);
//        sourceBuilder.size(pageSize);
////
////        //匹配
////        MatchQueryBuilder matchQueryBuilder = new MatchQueryBuilder("pdftextstructure",keyword);
////        sourceBuilder.query(matchQueryBuilder)
////                .timeout(TimeValue.timeValueSeconds(60));
////        //执行搜索
////        searchRequest.source(sourceBuilder);
////        SearchResponse searchResponse=restHighLevelClient.search(searchRequest,RequestOptions.DEFAULT);
//
//        //匹配
//        TermQueryBuilder termQueryBuilder = QueryBuilders.termQuery("all", keyword);
//        sourceBuilder.query(termQueryBuilder)
//                .timeout(TimeValue.timeValueSeconds(10));
//
//        //执行搜索
//        searchRequest.source(sourceBuilder);
//        SearchResponse searchResponse=restHighLevelClient.search(searchRequest,RequestOptions.DEFAULT);
//        log.info("es响应:"+searchResponse.getHits().getHits().length);
//        //解析结果
//        ArrayList<EsDocumentBo> list = new ArrayList<>();
//        System.out.println(JSON.toJSONString(searchResponse.getHits()));//打印命中集合
//
//        //对象映射
//        for (SearchHit documentFields : searchResponse.getHits()) {
//            EsDocumentBo esdocumentBo=new EsDocumentBo(
//                    Integer.toUnsignedLong((Integer) documentFields.getSourceAsMap().get("pdfdescid")),
//                    Integer.toUnsignedLong((Integer) documentFields.getSourceAsMap().get("pdfid")),
//                    (Integer)documentFields.getSourceAsMap().get("pdfpage"),
//                    (String)documentFields.getSourceAsMap().get("pdftextstructure"),
//                    (String)documentFields.getSourceAsMap().get("pdfpicurl"),
//                    documentFields.getScore()
//            );
//            //添加到list集合
//            list.add(esdocumentBo);
////            log.info(documentFields.toString());
////            log.info(esdocumentBo.toString());
//        }
//        //按照pdfid分类,分类成对应文献
//        Map<Long ,List<EsDocumentBo>> map= list.stream().collect(Collectors.groupingBy(EsDocumentBo::getPdfId));//分类收集
//        List<SearchShow> searchShows=new ArrayList<>();//新建一个合适的显示用的对象
//        for(Map.Entry<Long,List<EsDocumentBo>> entry : map.entrySet()){//for遍历
//            List<EsDocumentBo> documentBos = entry.getValue();//获取list集合
//            SearchShow searchShow = new SearchShow();//用于显示在前端的对象
//            for (EsDocumentBo documentBo : documentBos) {//然后组装成完整的
//               if(searchShow.getText()==null) {//确保search.text是第一个的内容
//                   searchShow.setText((String) documentBo.getAll());
//
//                   searchShow.setPdfId(documentBo.getPdfId());
//
//                   searchShow.setTitle("");//
//                   // searchShow.setImgUrl("");// 设置图片
//                   searchShow.setPageString("命中页数有:");
//                   //searchShow.setScore(0f);
//               }
//                //searchShow.setScore(documentBo.getScore()+ searchShow.getScore());//加分
//                searchShow.setPageString(searchShow.getPageString()+documentBo.getPdfPage()+"  ");
//
//            }
//            searchShows.add(searchShow);
//
//
//        }
//
//        return searchShows;
//    }
